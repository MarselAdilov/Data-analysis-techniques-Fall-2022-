source("~/Documents/Coding/R/2.1.3.R", echo=TRUE)
source("~/Documents/Coding/R/2.1.3.R", echo=TRUE)
source("~/Documents/Coding/R/2.1.3.R", echo=TRUE)
source("~/Documents/Coding/R/2.1.3.R", echo=TRUE)
source("~/Documents/Coding/R/2.1.3.R", echo=TRUE)
source("~/Documents/Coding/R/2.1.3.R", echo=TRUE)
source("~/Documents/Coding/R/2.1.3.R", echo=TRUE)
source("~/Documents/Coding/R/2.1.3.R", echo=TRUE)
# matrix
m <-matrix(1:6, nrow=2)
matrix(1:6, nrow=2, byrow=T)
# Размерность dim
dim(m)
source("~/Documents/Coding/R/2.1.3.R", echo=TRUE)
source("~/Documents/Coding/R/2.1.3.R", echo=TRUE)
source("~/Documents/Coding/R/2.1.3.R", echo=TRUE)
source("~/Documents/Coding/R/2.1.3.R", echo=TRUE)
source("~/Documents/Coding/R/2.1.3.R", echo=TRUE)
source("~/Documents/Coding/R/2.1.3.R", echo=TRUE)
source("~/Documents/Coding/R/2.1.3.R", echo=TRUE)
source("~/Documents/Coding/R/2.1.3.R", echo=TRUE)
source("~/Documents/Coding/R/2.1.3.R", echo=TRUE)
source("~/Documents/Coding/R/2.1.3.R", echo=TRUE)
source("~/Documents/Coding/R/2.1.3.R", echo=TRUE)
source("~/Documents/Coding/R/2.1.3.R", echo=TRUE)
source("~/Documents/Coding/R/2.1.3.R", echo=TRUE)
source("~/Documents/Coding/R/2.1.3.R", echo=TRUE)
source("~/Documents/Coding/R/2.1.3.R", echo=TRUE)
source("~/Documents/Coding/R/2.1.3.R", echo=TRUE)
source("~/Documents/Coding/R/2.1.3.R", echo=TRUE)
set.seed(1789)
bastille <- list(
"La Chapelle Tower" = rbinom(5, 10, 1/2),
"Tresor Tower" = rbinom(8, 12, 1/4),
"Comte Tower" = rbinom(14, 3, 1/5) + 1,
"Baziniere Tower" = rbinom(8, 4, 4/5),
"Bertaudiere Tower" = rbinom(4, 8, 2/3),
"Liberte Tower" = rbinom(1, 100, 0.1),
"Puits Tower" = rbinom(5, 5, 0.7),
"Coin Tower" = rbinom(3, 16, 0.4)
)
bastille
lapply(bastille, sum)
bastille[which.min(bastille)]
bastille[which.min(name(bastille))]
bastille[which.min(names(bastille))]
names(bastille)
print(bastille[which.min(names(bastille))])
which.min(names(bastille))
min(bastille)
unlist(bastille)
bastille
bastille <- list(
"La Chapelle Tower" = rbinom(5, 10, 1/2),
"Tresor Tower" = rbinom(8, 12, 1/4),
"Comte Tower" = rbinom(14, 3, 1/5) + 1,
"Baziniere Tower" = rbinom(8, 4, 4/5),
"Bertaudiere Tower" = rbinom(4, 8, 2/3),
"Liberte Tower" = rbinom(1, 100, 0.1),
"Puits Tower" = rbinom(5, 5, 0.7),
"Coin Tower" = rbinom(3, 16, 0.4)
)
bastille
b_sum <- lapply(bastille, sum); b_sum # сумма в каждой башне
unlist(b_sum)
names(b_sum)
which.min(b_sum)
print("Самая незащещенная башня: название и номер")
which.min(b_sum)
unsave_tower <- which.min(b_sum); unsave_tower
print("Кол-во солдат в ", names(unsave_tower), ": ", bastille[unsave_tower])
print(c("Кол-во солдат в ", names(unsave_tower), ": ", bastille[unsave_tower])
print(c("Кол-во солдат в ", names(unsave_tower), ": ", bastille[unsave_tower]))
names(unsave_tower)
string(names(unsave_tower))
str(names(unsave_tower))
bastille[unsave_tower]
bastille[[unsave_tower]]
print("Кол-во солдат в ", names(unsave_tower), ": ", bastille[[unsave_tower]])
print("Кол-во солдат в ", names(unsave_tower), ": ", str(bastille[[unsave_tower]]))
print("Кол-во солдат в ", str(names(unsave_tower)), ": ", str(bastille[[unsave_tower]]))
print("Кол-во солдат в ", str(names(unsave_tower)), ": ", str(bastille[[unsave_tower]]))
print(c("Кол-во солдат в ", str(names(unsave_tower)), ": ", str(bastille[[unsave_tower]])))
print("Самая незащещенная башня: название и номер")
unsave_tower <- which.min(b_sum); unsave_tower
print("Кол-во солдат:")
bastille[[unsave_tower]]
total <- sum(b_sum)
source("~/Documents/Coding/R/2.1.4.R", echo=TRUE)
total <- sum(b_sum[1:length(b_sum)])
total
# Import the qcc library
library(qcc)
# Create the defects data column
defects <- as.integer(rnorm(50, 3, 1))
# Create the sample size data column
sample_size <- as.integer(rnorm(50, 20, 3))
# Create a data frame with both columns
df <- data.frame(defects, sample_size)
# Create the p-chart
p_chart <- with(df, qcc(df$defects, df$sample_size, type = "p", data.name = "defects"))
# Get the summary for the chart
summary(p_chart)
# Import the qcc library
library(qcc)
# Create the defects data column
defects <- as.integer(rnorm(50, 3, 1))
# Create the sample size data column
sample_size <- as.integer(rep(20, 50))
# Create a data frame with both columns
df <- data.frame(defects, sample_size)
# Create the np-chart
np_chart <- with(df, qcc(df$defects, df$sample_size, type = "np", data.name = "defects"))
# Get the summary for the chart
summary(np_chart)
# https://towardsdatascience.com/r-for-industrial-engineers-quality-control-charts-p-chart-and-np-chart-e99b2f07fbe1
c(1,2,3)
data(iris)
view(iris)
plot(iris)
plor(iris$Species, iris$Sepal.Width)
plot(iris$Species, iris$Sepal.Width)
plot(iris$Species, iris$Sepal.Length)
plot(iris$Species, iris$Sepal.Length, iris$Sepal.Width)
plot(iris$Species, iris$Sepal.Length, iris$Sepal.Width)
plot(iris$Sepal.Length, iris$Sepal.Width)
plot(iris$Species, iris$Sepal.Length)
f(4)
f <- function(x) x*x
f(4)
0.33 == 3*0.11
0.45 == 3*0.15
round(0.33 == 3*0.11) == round(0.45 == 3*0.15)
round(3*0.11) == round(3*0.15)
a.b.d.c = 12345
a
a.b.d.c
a <- 124
a <- 124
a
x <- c(1,2,3,4,5)
x
x[2]
x[1]+x[4]
is.vector(x)
x[1]+x[4]
sum(x)
b <- c('a', 'b')
b
b = a+b
c = a
b = a+b
c<-a
c<-x
b = x+c
b
b+2
c<-a==b
c<-x==b
c<-2==b
y = seq(1,300)
y
sum(y)
mean(y)
hist(x,y)
hist(y)
hist(b)
b <- c(1,1,1,2,2,3,4,4,4,4,5,5,6,6,6,6,7,6,7,)
hist(b)
b <- c(1,1,1,2,2,3,4,4,4,4,5,5,6,6,6,6,7,6,7,8)
hist(b)
x <- c(1, 2, 3, 4)
x.a =<-array(x, dim=c(2,2))
x.a <-array(x, dim=c(2,2))
x
x.a
which(x.a <=2 )
x.a[1,1]
x.a[,1]
x.a[1,]
m <- matrix(c(40,1,50,3), nrow=2)
m
m.rownames = c('first', 'second')
m
m.rownames
m.rownames[second,]
m.rownames[first,]
m.rownames['first',]
m.rownames[,'first']
m[,'first']
m['first',]
m[first,]
rownames(f) <- c('first', 'second')
f
m
rownames(m) <- c('first', 'second')
m
rownames(m) <- c('Трудодни', 'Рабочие')
colnames(m) <- c('Автомобили', 'Грузовики')
m
m["Трудодни", "Грузовики"]
m[1, 2"]
m[1, 2]
m[1, 2]
m[1, 2]
m[1, 2]
b
m[1, 2]
d
=
rownames(m) <- c('Трудодни', 'Рабочие')
colnames(m) <- c('Автомобили', 'Грузовики')
m
m["Трудодни", "Грузовики"]
m <- matrix(c(40,1,50,3), nrow=2)
m
rownames(m) <- c('Трудодни', 'Рабочие')
colnames(m) <- c('Автомобили', 'Грузовики')
m[1, 2]
m["Трудодни", "Грузовики"]
m
m$"Трудодни"
m.lst$"Трудодни"
b %*% x
b * x
ifelse(b<x, b+x, b-x)
# Сложение
5 + 5
# Сложение
5 + 5
# Вычитание
5 - 5
# Умножение
3 * 5
# Деление
(5 + 5) / 2
# Возведение в степень
5 ^ 5
# Возведение в степень
5 ^ 2
# Деление по модулю
26 % 5
# Деление по модулю
26 %% 5
# Целочисленное деление
26 // 5
# Целочисленное деление
26 / 5
# Целочисленное деление
26 %/% 5
# Присвойте значение 33.3 переменной my_numeric
my_numeric <- 33.3
# Проверьте тип данных переменной
class(my_numeric)
# Смените значение my_numeric на 42
my_numeric <- 42
# Проверьте тип данных my_numeric
class(my_numeric)
# Проверьте тип данных my_numeric
typeof(my_numeric)
# Проверьте тип данных my_numeric
typeof(my_numeric)
# Проверьте тип данных переменной
class(my_numeric)
# Присвойте значение 33.3 переменной my_numeric
my_numeric <- 33.3
# Проверьте тип данных переменной
class(my_numeric)
typeof(my_numeric)
# Смените значение my_numeric на 42
my_numeric <- 42
# Проверьте тип данных my_numeric
typeof(my_numeric)
class(my_numeric)
# Установите значение my_character в "МИР"
my_character <- "Привет"
# Установите значение my_character в "МИР"
my_character <- "Привет"
my_character <- "МИР"
# Проверьте тип данных my_numeric
class(my_character)
# Установите my_logical в FALSE
my_logical <- TRUE
# Установите my_logical в FALSE
my_logical <- TRUE
my_logical <- FALSE
# Проверьте тип данных my_logical
class(my_logical)
# Проверка и преобразование типов is.XYS as.XYZ
is.XYS
# Присвойте значение 66 переменной x
x <- 66
# Выведите на экран значение x
x
# Присвойте значение 33 переменной y
y <- 33
# Выведите на экран значение y
y
# Выведите на экран сумму x и y
x + y
# Сохраните сумму в переменную z
z = x + y
my_character <- "33"
# Присвойте значение 33.3 переменной my_numeric
my_numeric <- 33.3
# Проверьте тип данных my_character
is.numeric(my_character)
is.character(my_character)
# Преобразуйте my_character в число при помощи функции as.numeric и запишите в переменную my_numeric_character
my_numeric_character = as.numeric(my_character)
# Преобразуйте my_character в число при помощи функции as.numeric и запишите в переменную my_numeric_character
my_numeric_character <- as.numeric(my_character)
# Преобразуйте my_character в число при помощи функции as.numeric и запишите в переменную my_numeric_character
my_numeric_character <- as.numeric(my_character)
# Пребразуйте сумму my_numeric и my_numeric_character и выведите на экран
as.character(my_numeric_character + my_numeric)
#Векторы числовой и строковый
num_vector <- c(1, 10, 49)
#Векторы числовой и строковый
num_vector <- c(1, 10, 49)
#Векторы числовой и строковый
num_vector <- c(1, 10, 49)
char_vector <- c("a", "b", "c")
# Заполните булевый вектор
bool_vector <- c(TRUE, FALSE, F, T)
# Выберите из числового вектора значения при помощи булевого вектора
num_vector[bool_vector]
# Заполните булевый вектор
bool_vector <- c(TRUE, FALSE, TRUE)
# Выберите из числового вектора значения при помощи булевого вектора
num_vector[bool_vector]
# Повторите то же самое для строкововго вектора
char_vector[bool_vector]
#Составте булевый вектор из числового, выбрав элеметны большие 10
x<-num_vector>10
#С помощью вектора x выберите из числового вектора данные
num_vector[x]
# Запишите то же самое без применения промежуточной переменной x
which(num_vector>10)
# Запишите то же самое без применения промежуточной переменной x
num_vector[num_vector>10]
#Придумайте подобный пример для строковго вектора
y <- char_vector<"c"
char_vector[x]
char_vector[y]
char_vector[char_vector<"c"]
# Урал (Домашние матчи)
ural_home <- c(2, 0, 1, 0)
# Выездные
ural_away <- c(0, 0, 1, 1)
#Напечатайте на консоль оба вектора
ural_home
ural_away
# Назначим имена элеметом вектора (Команды Гости)
names(ural_home) <- c("Ufa", "CSKA", "Arsenal", "Anzhi")
#Проделайте то же самое для вектора ural_away назначив имена команд гостей (away_names)
names(ural_away) <- c("Rostov", "Amkar", "Rubin", "Orenburg")
#Напечатайте на консоль оба вектора, заметьте разницу
ural_home
ural_away
#Посчитайте статистикку домашних и выездных матчей (общее кол-во голов, среднее количество голов)
mean(ural_home)
sum(ural_home)
mean(ural_away)
sum(ural_away)
#сравните векторы ural_home и ural_away и сделайте вывод
ural_home < ural_away
#сравните векторы ural_home и ural_away и сделайте вывод
ural_home > ural_away
#Посчитайте статистикку домашних и выездных матчей (общее кол-во голов, среднее количество голов)
mean(ural_home)
sum(ural_home)
mean(ural_away)
sum(ural_away)
#сравните векторы ural_home и ural_away и сделайте вывод
sum(ural_home-ural_away)
#сравните векторы ural_home и ural_away и сделайте вывод
sum(ural_home)-sum(ural_away)
# Проверка и преобразование типов is.XYS as.XYZ
# Присвойте значение 33.3 переменной my_numeric
my_numeric <- 33.3
# Установите значение my_character в "33"
my_character <- "Привет"
my_character <- "33"
# Проверьте тип данных my_character
is.numeric(my_character)
is.character(my_character)
# Преобразуйте my_character в число при помощи функции as.numeric и запишите в переменную my_numeric_character
my_numeric_character <- as.numeric(my_character)
# Пребразуйте сумму my_numeric и my_numeric_character и выведите на экран
as.character(my_numeric_character + my_numeric)
# Пребразуйте сумму my_numeric и my_numeric_character и выведите на экран
cat(as.character(my_numeric_character + my_numeric))
# Присвойте значение 66 переменной x
x <- 66
# Выведите на экран значение x
cat(x)
# Присвойте значение 33 переменной y
y <- 33
# Выведите на экран значение y
y
# Выведите на экран значение y
cat(y)
# Выведите на экран сумму x и y
cat(x + y)
# Сохраните сумму в переменную z
z = x + y
#Напечатайте на консоль оба вектора
cat(ural_home)
# Урал (Домашние матчи)
ural_home <- c(2, 0, 1, 0)
# Выездные
ural_away <- c(0, 0, 1, 1)
#Напечатайте на консоль оба вектора
cat(ural_home)
ural_away
# Назначим имена элеметом вектора (Команды Гости)
names(ural_home) <- c("Ufa", "CSKA", "Arsenal", "Anzhi")
#Проделайте то же самое для вектора ural_away назначив имена команд гостей (away_names)
names(ural_away) <- c("Rostov", "Amkar", "Rubin", "Orenburg")
#Напечатайте на консоль оба вектора, заметьте разницу
cat(ural_home)
# Пример лабы
msg <- readLines('content/putin-2012.txt') # files -> [choose folder] -> Set as working derictory
setwd("~/Documents/_The university/4th course/7th semester/Методы анализа данных")
# Пример лабы
msg <- readLines('content/putin-2012.txt') # files -> [choose folder] -> Set as working derictory
# Пример лабы
msg <- readLines('content/putin-2012.txt') # files -> [choose folder] -> Set as working derictory
# Пример лабы
msg <- readLines('content/putin-2012.txt') # files -> [choose folder] -> Set as working derictory
msg
# подсчитает кол-во символов
length(msg) # кол-во строк
l <- lapply(msg, nchar)
Reduce(sum,l) # кол-во символов
# можно не заморачиваться
txt <- paste(msg, collapse = " ")
nchar(txt)
r <- grep('мы', msg) # find
r
r <- grep('Мы', msg) # find
r
msg[r]
r <- grep(' мы', msg) # find
r
msg[r]
r <- grep(' мы.', msg) # find
r
msg[r]
r <- grep(' мы\.', msg) # find
r <- grep(' мы\.', msg) # find
r
msg[r]
r <- grep(' мы/.', msg) # find
r
msg[r]
r <- grep(' мы ', msg) # find
r
msg[r]
words <- unlist(strsplit(txt, ' '))
wc <- table(words)
wc <- table(words) # wc - word count
wc <- sort(wc, decreasing = TRUE)
head(wc,20)
# > Регулярные выражения
txt
# > Регулярные выражения
txt <- "В 2012 году состоялись выборы"
YP <- '\d{4}' # year pattern (четыре цифры подряд)
yp <- '/d{4}' # year pattern (четыре цифры подряд)
grep(yp, txt)
res <- grep(yp, txt)
res
yp <- "/d{4}" # year pattern (четыре цифры подряд)
grep(yp, txt)
grep(yp, txt, perl = TRUE)
yp <- '/d{4}' # year pattern (четыре цифры подряд)
grep(yp, txt, perl = TRUE)
yp <- '\d{4}' # year pattern (четыре цифры подряд)
yp <- '/d{4}' # year pattern (четыре цифры подряд)
grep(yp, txt, perl = TRUE)
yp <- '\\d{4}' # year pattern (четыре цифры подряд)
grep(yp, txt, perl = TRUE)
gregexep(yp, txt, perl = TRUE)
gregexec(yp, txt, perl = TRUE)
gregexpr(yp, txt, perl = TRUE)
attr(gregexpr(yp, txt, perl = TRUE), 'match.length')
setwd("~/Documents/_The university/4th course/7th semester/Методы анализа данных/Data-analysis-techniques_Fall-2022/Classwork 3")
# > Анализ текста
msg <- readLines('putin-2018.txt') # files -> [choose folder] -> Set as working derictory
msg
# подсчитает кол-во символов
length(msg) # кол-во строк
l <- lapply(msg, nchar)
Reduce(sum,l) # кол-во символов
txt <- paste(msg, collapse = " ")
nchar(txt)
txt
# ищем строки с "мы"
r <- grep(' мы ', msg, ignore.case = TRUE) # ignore.case - игнорировать регистр
r
msg[r]
r <- grep(' мы/.', msg) # find
r
msg[r]
# частота встречания слов
words <- unlist(strsplit(txt, ' '))
wc <- table(words) # wc - word count
wc <- sort(wc, decreasing = TRUE) # сортируем по частоте встречания
head(wc,20)
head(wc,20)
